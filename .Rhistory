library(wordcloud)
library(RColorBrewer)
library(tidyr)
library(leaflet)
library(countrycode)
library(plotly)
library(reshape2)
library(stats)
install.packages(c("readr", "corrplot", "reshape2", "gbm", "randomForest"))
disney_plus_titles <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/netflix_titles.csv", fileEncoding = "UTF-8")
netflix_titles <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/disney_plus_titles.csv", fileEncoding = "UTF-8")
imdb_movies <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/imdb_movies.csv", fileEncoding = "UTF-8")
disney_plus_movies <- filter(disney_plus_titles, type == "Movie")
netflix_movies <- filter(netflix_titles, type == "Movie")
disney_plus_movies$source <- 'Disney+'
netflix_movies$source <- 'Netflix'
# Combining the two datasets
combined_movies <- bind_rows(disney_plus_movies, netflix_movies)
# Removing duplicate movie titles
combined_movies_unique <- combined_movies %>%
distinct(title, .keep_all = TRUE)
final_dataset <- merge(combined_movies_unique, imdb_movies, by = "title", all.x = TRUE)
final_dataset <- na.omit(final_dataset)
final_dataset$example_column[is.na(final_dataset$example_column)] <- median(final_dataset$example_column, na.rm = TRUE)
final_dataset <- unique(final_dataset)
#write.csv(final_dataset, "C:/Users/PC/Documents/Assignments/R programming/Assignment 2/Datasets/final_dataset1.csv", row.names = FALSE)
final_dataset <- select(final_dataset, -orig_title)
#final_dataset <- select(final_dataset, -overview)
final_dataset$title <- sapply(final_dataset$title, function(x) iconv(x, from = "UTF-8", to = "ASCII", sub = ""))
final_dataset$genre <- sapply(final_dataset$genre, function(x) iconv(x, from = "UTF-8", to = "ASCII", sub = ""))
final_dataset$budget_x[is.na(final_dataset$budget_x)] <- median(final_dataset$budget_x, na.rm = TRUE)
final_dataset$revenue[is.na(final_dataset$revenue)] <- median(final_dataset$revenue, na.rm = TRUE)
head(final_dataset,5)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/netflix/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
x <- list(1, 2, 'John', 'Mary', NA, TRUE)
length(x)
sapply(x, is.na)
as.numeric(x)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
data.frame("variable"=c(colnames(titles)), "missing values count"=sapply(titles, function(x) sum(is.na(x))), row.names=NULL)
library(readr)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/netflix/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
library(readr)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/Assignment 1/netflix/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
head(titles)
#----to remove the show_id column -------------------------------------------
titles = subset(titles, select = -c(show_id) )
#-----------------------------------------------------------------------------
data.frame("variable"=c(colnames(titles)), "missing values count"=sapply(titles, function(x) sum(is.na(x))), row.names=NULL)
#-----------------Calculating missing/Na values percentage for each column-------------
# Calculate the total number of records (rows) in the dataframe
total_records <- nrow(titles)
# Calculate missing values count for each column
missing_values_count <- sapply(titles, function(x) sum(is.na(x)))
# Calculate missing percentage for each feature
missing_percentage <- missing_values_count / total_records * 100
# Create a data frame to display variable names alongside their missing percentage
missing_percentage_df <- data.frame(
variable = names(missing_percentage),
missing_percentage = missing_percentage
)
# Print the missing percentage dataframe
print(missing_percentage_df)
#-------------------------------------------------------------------------------------=
#---- Cleaning the Dataset-------------------------------------------------------
titles$director[is.na(titles$director)] <- "Unknown"
mode_country <- names(sort(table(titles$country), decreasing = TRUE)[1])
titles$country[is.na(titles$country)] <- mode_country
mode_cast <- names(sort(table(titles$cast), decreasing = TRUE)[1])
titles$cast[is.na(titles$cast)] <- mode_cast
titles <- na.omit(titles)
#------------------------------------------------------------------------------------
#---------------To install all packages before analysis--------------------------------
install.packages("dplyr")
library(dplyr)
install.packages("tidyverse")
library(readr)
titles=read.csv(file = 'C:/Users/PC/Documents/Assignments/R programming/Assignment 1/netflix/netflix_titles.csv', na.strings = c("NA", ""), stringsAsFactors=F)
head(titles)
#----to remove the show_id column -------------------------------------------
titles = subset(titles, select = -c(show_id) )
data.frame("variable"=c(colnames(titles)), "missing values count"=sapply(titles, function(x) sum(is.na(x))), row.names=NULL)
# Calculate the total number of records (rows) in the dataframe
total_records <- nrow(titles)
# Calculate missing values count for each column
missing_values_count <- sapply(titles, function(x) sum(is.na(x)))
# Calculate missing percentage for each feature
missing_percentage <- missing_values_count / total_records * 100
# Create a data frame to display variable names alongside their missing percentage
missing_percentage_df <- data.frame(
variable = names(missing_percentage),
missing_percentage = missing_percentage
)
# Print the missing percentage dataframe
print(missing_percentage_df)
#---- Cleaning the Dataset-------------------------------------------------------
titles$director[is.na(titles$director)] <- "Unknown"
mode_country <- names(sort(table(titles$country), decreasing = TRUE)[1])
titles$country[is.na(titles$country)] <- mode_country
mode_cast <- names(sort(table(titles$cast), decreasing = TRUE)[1])
titles$cast[is.na(titles$cast)] <- mode_cast
titles <- na.omit(titles)
install.packages("dplyr")
library(dplyr)
install.packages("tidyverse")
library("tidyverse")
install.packages("plotly")
library("plotly")
install.packages("tidytext")
library(tidytext)
install.packages("tidyr")
library(tidyr)
library(ggplot2)
install.packages("wordcloud")
install.packages("tm")
library(wordcloud)
library(tm)
install.packages("lubridate")
install.packages("dplyr")
install.packages("tidyr")
install.packages("dplyr")
install.packages("tidyr")
amount_by_type <- titles %>% group_by(type) %>% summarise(
count = n()
)
fig1 <- plot_ly(amount_by_type, labels = ~type, values = ~count, type = 'pie', marker = list(colors = c("#bd3939", "#399ba3")))
fig1 <- fig1 %>% layout(title = 'Amount Of Netflix Content By Type',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
fig1
s <- strsplit(titles$country, split = ", ")
titles_countries_fuul <- data.frame(type = rep(titles$type, sapply(s, length)), country = unlist(s))
titles_countries_fuul$country <- as.character(gsub(",","",titles_countries_fuul$country))
amount_by_country <- na.omit(titles_countries_full) %>%
group_by(country, type) %>%
summarise(count = n()) %>%
filter(type %in% c("Movie", "TV Show")) %>%
group_by(country) %>%
summarise(total_count = sum(count)) %>%
top_n(10, total_count) %>%
arrange(desc(total_count)) %>%
inner_join(amount_by_country, by = "country")
movies_by_duration_country<-na.omit(titles[titles$type=="Movie",][,c("country", "duration")])
s4 <- strsplit(movies_by_duration_country$country, split = ", ")
movies_by_duration_country_full <- data.frame(duration = rep(movies_by_duration_country$duration, sapply(s4, length)), country = unlist(s4))
movies_by_duration_country_full$duration <- as.numeric(gsub(" min","", movies_by_duration_country_full$duration))
movies_by_duration_country_full_subset<-movies_by_duration_country_full[movies_by_duration_country_full$country %in% c("United States", "India", "United Kingdom", "Canada", "France", "Japan", "Spain", "South Korea", "Mexico", "Australia", "Taiwan"),]
fig8 <- plot_ly(movies_by_duration_country_full_subset, y = ~duration, color = ~country, type = "box")
fig8 <- fig8 %>% layout(xaxis=list(title="Country"), yaxis = list(title = 'Duration (in min)'),
title="Box-Plots Of Movie Duration In Top 11 Countries")
fig8
titles %>%
group_by(rating) %>%
summarise(count = n()) %>%
ggplot(aes(x = rating, y = count, fill = rating)) +
geom_bar(stat = "identity") +
labs(title = "Content Distribution by Rating", x = "Rating", y = "Count") +
theme_minimal()
titles$date_added <- as.Date(titles$date_added, "%B %d, %Y")
titles$year_added <- format(titles$date_added, "%Y")
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
#---------------------
titles$date_added <- as.Date(titles$date_added, "%B %d, %Y")
titles$year_added <- format(titles$date_added, "%Y")
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
titles$date_added <- as.Date(titles$date_added, "%B %d, %Y")
titles$year_added <- format(titles$date_added, "%Y")
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
#------------------------
titles$date_added <- as.Date(titles$date_added, "%B %d, %Y")
titles$year_added <- format(titles$date_added, "%Y")
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
# Handle missing values and remove unnecessary columns as you've done
# Your previous code handles NAs and fills in for 'director' and 'country', 'cast'
# Aggregate the data to count the number of titles added each year
yearly_content <- titles %>%
group_by(year_added) %>%
summarise(titles_added = n())
# Convert 'year_added' back to numeric for regression analysis
yearly_content$year_added <- as.numeric(yearly_content$year_added)
# Ensure no NA values are present that could interfere with the regression analysis
yearly_content <- na.omit(yearly_content)
# Perform Linear Regression Analysis
model <- lm(titles_added ~ year_added, data = yearly_content)
# Print the summary of the regression model to understand the fit
summary(model)
# Visualize the Results with ggplot2
library(ggplot2)
ggplot(yearly_content, aes(x = year_added, y = titles_added)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Netflix Content Growth Over Years",
x = "Year",
y = "Number of Titles Added") +
theme_minimal()
ggplot(amount_by_country, aes(x = country, y = count, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
labs(y = "Number of Titles", x = "Country", title = "Top 10 Countries by Number of Movies and TV Shows") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_fill_manual(values = c("#bd3636", "#398ba3"), name = "Type", labels = c("Movie", "TV Show"))
s <- strsplit(titles$country, split = ", ")
titles_countries_fuul <- data.frame(type = rep(titles$type, sapply(s, length)), country = unlist(s))
titles_countries_fuul$country <- as.character(gsub(",","",titles_countries_fuul$country))
amount_by_country <- na.omit(titles_countries_full) %>%
group_by(country, type) %>%
summarise(count = n()) %>%
filter(type %in% c("Movie", "TV Show")) %>%
group_by(country) %>%
summarise(total_count = sum(count)) %>%
top_n(10, total_count) %>%
arrange(desc(total_count)) %>%
inner_join(amount_by_country, by = "country")
titles_words <- titles %>%
unnest_tokens(word, description)
# Count words and filter out common stop words
word_counts <- titles_words %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
top_n(20, n)
# Generate the word cloud
wordcloud(words = word_counts$word, freq = word_counts$n, min.freq = 1,
max.words = 20, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
titles_words <- titles %>%
unnest_tokens(word, description)
# Count words and filter out common stop words
word_counts <- titles_words %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
top_n(20, word)
# Generate the word cloud
wordcloud(words = word_counts$word, freq = word_counts$n, min.freq = 1,
max.words = 20, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
titles_words <- titles %>%
unnest_tokens(word, description)
# Count words and filter out common stop words
word_counts <- titles_words %>%
anti_join(stop_words) %>%
count(word, sort = TRUE) %>%
top_n(20, n)
# Generate the word cloud
wordcloud(words = word_counts$word, freq = word_counts$n, min.freq = 1,
max.words = 20, random.order = FALSE, rot.per = 0.35,
colors = brewer.pal(8, "Dark2"))
colnames(imdb_movies)
colnames(netflix_titles)
colnames(disney_plus_titles)
#----------retrieve dataset---------
disney_plus_titles <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/netflix_titles.csv", fileEncoding = "UTF-8")
netflix_titles <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/disney_plus_titles.csv", fileEncoding = "UTF-8")
imdb_movies <- read.csv("C:/Users/PC/Documents/GitHub/RAssignment/imdb_movies.csv", fileEncoding = "UTF-8")
disney_plus_movies <- filter(disney_plus_titles, type == "Movie")
netflix_movies <- filter(netflix_titles, type == "Movie")
disney_plus_movies$source <- 'Disney+'
netflix_movies$source <- 'Netflix'
# Combining the two datasets
combined_movies <- bind_rows(disney_plus_movies, netflix_movies)
# Removing duplicate movie titles
combined_movies_unique <- combined_movies %>%
distinct(title, .keep_all = TRUE)
final_dataset <- merge(combined_movies_unique, imdb_movies, by = "title", all.x = TRUE)
final_dataset <- na.omit(final_dataset)
final_dataset$example_column[is.na(final_dataset$example_column)] <- median(final_dataset$example_column, na.rm = TRUE)
final_dataset <- unique(final_dataset)
#write.csv(final_dataset, "C:/Users/PC/Documents/Assignments/R programming/Assignment 2/Datasets/final_dataset1.csv", row.names = FALSE)
final_dataset <- select(final_dataset, -orig_title)
#final_dataset <- select(final_dataset, -overview)
final_dataset$title <- sapply(final_dataset$title, function(x) iconv(x, from = "UTF-8", to = "ASCII", sub = ""))
final_dataset$genre <- sapply(final_dataset$genre, function(x) iconv(x, from = "UTF-8", to = "ASCII", sub = ""))
final_dataset$budget_x[is.na(final_dataset$budget_x)] <- median(final_dataset$budget_x, na.rm = TRUE)
final_dataset$revenue[is.na(final_dataset$revenue)] <- median(final_dataset$revenue, na.rm = TRUE)
#Selecting only numerical columns for the correlation matrix
numerical_data <- final_dataset[, c("release_year", "budget_x", "revenue", "score")]
# Calculate the correlation matrix
cor_matrix <- cor(numerical_data, use = "pairwise.complete.obs")  # Handles missing values
# Melt the correlation matrix for use with ggplot
melted_cor_matrix <- melt(cor_matrix)
options(repos = c(CRAN = "https://cran.rstudio.com/"))
if (!require("tm", quietly = TRUE)) install.packages("tm", quiet = TRUE)
if (!require("wordcloud", quietly = TRUE)) install.packages("wordcloud", quiet = TRUE)
if (!require("RColorBrewer", quietly = TRUE)) install.packages("RColorBrewer", quiet = TRUE)
if (!require("leaflet", quietly = TRUE)) install.packages("leaflet", quiet = TRUE)
if (!require("countrycode", quietly = TRUE)) install.packages("countrycode", quiet = TRUE)
if (!require("mgcv", quietly = TRUE)) install.packages("mgcv", quiet = TRUE)
if (!require("maps", quietly = TRUE)) install.packages("maps", quiet = TRUE)
if (!require("ggplot2", quietly = TRUE)) install.packages("ggplot2", quiet)
install.packages(c("readr", "corrplot", "reshape2", "gbm", "randomForest"))
library(ggplot2)
library(maps)
library(randomForest)
library(caret)
library(gbm)
library(mgcv)
library(readr)
library(dplyr)
library(tidyverse)
library(mgcv)
library(corrplot)
library(tm)
library(wordcloud)
library(RColorBrewer)
library(tidyr)
library(leaflet)
library(countrycode)
library(plotly)
library(reshape2)
library(stats)
install.packages(c("readr", "corrplot", "reshape2", "gbm", "randomForest"))
#Selecting only numerical columns for the correlation matrix
numerical_data <- final_dataset[, c("release_year", "budget_x", "revenue", "score")]
# Calculate the correlation matrix
cor_matrix <- cor(numerical_data, use = "pairwise.complete.obs")  # Handles missing values
# Melt the correlation matrix for use with ggplot
melted_cor_matrix <- melt(cor_matrix)
# Plotting the heatmap
ggplot(melted_cor_matrix, aes(Var1, Var2, fill = value)) +
geom_tile() +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1),
axis.text.y = element_text(size = 12)) +
labs(x = '', y = '', title = 'Heatmap of Correlation Matrix') +
coord_fixed()
cor_matrix <- cor(final_dataset[, c("release_year", "budget_x", "revenue", "score")],
use = "complete.obs")
cor_matrix <- cor(final_dataset[, c("release_year", "budget_x", "revenue", "score")], use = "complete.obs")
# Generate a heatmap using corrplot with an incorrect parameter to simulate a common mistake
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", tl.srt = 45, addCoef.col = "black",
wrong_parameter = "This will cause an error")
# Correctly calculate the correlation matrix but with an intentional typo in column names
cor_matrix <- cor(final_dataset[, c("release_yr", "budget_amount", "revenues", "scores")], use = "complete.obs")
# Correctly calculate the correlation matrix but with an intentional typo in column names
cor_matrix <- cor(final_dataset[, c("release_yr", "budget_x", "revenue", "score")], use = "complete.obs")
x <- list(1, 2, 'John', 'Mary', NA, TRUE)
length(x)
sapply(x, is.na)
as.numeric(x)
x <- list(1, 2, 'John', 'Mary', NA, TRUE)
length(x)
sapply(x, is.na)
as.numeric(x)
#-------------------------- Top 10 countries by number of movies and Tv show----------
s <- strsplit(titles$country, split = ", ")
titles_countries_fuul <- data.frame(type = rep(titles$type, sapply(s, length)), country = unlist(s))
titles_countries_fuul$country <- as.character(gsub(",","",titles_countries_fuul$country))
amount_by_country <- na.omit(titles_countries_full) %>%
group_by(country, type) %>%
summarise(count = n()) %>%
filter(type %in% c("Movie", "TV Show")) %>%
group_by(country) %>%
summarise(total_count = sum(count)) %>%
top_n(10, total_count) %>%
arrange(desc(total_count)) %>%
inner_join(amount_by_country, by = "country")
# Incorrect visualization due to swapped axes
plot_ly(data = final_dataset, x = ~revenue, y = ~budget_x, type = 'scatter', mode = 'markers')
layout(title = 'Budget vs. Revenue',
xaxis = list(title = 'Budget'),
yaxis = list(title = 'Revenue'))
plot_ly(data = final_dataset, x = ~budget_x, y = ~revenue, type = 'scatter', mode = 'markers') %>%
layout(title = 'Budget vs. Revenue',
xaxis = list(title = 'Budget'),
yaxis = list(title = 'Revenue'))
plot_ly(data = final_dataset, x = ~revenue, y = ~budget_x, type = 'scatter', mode = 'markers')
layout(title = 'Budget vs. Revenue',
xaxis = list(title = 'Budget'),
yaxis = list(title = 'Revenue'))
#--------scatter plot Budget vs Revenue-----------
plot_ly(data = final_dataset, x = ~budget_x, y = ~revenue, type = 'scatter', mode = 'markers') %>%
layout(title = 'Budget vs. Revenue',
xaxis = list(title = 'Budget'),
yaxis = list(title = 'Revenue'))
